requires 2.0.0

%h{
#include <stdio.h>
#include "rme-rule-manager.h"
%}

%privateheader{

#include <errno.h>

#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void *yyscan_t;
#endif

%}

class Rme:Config:Loader from G:Object
{
    public Rme:Config:Loader *new(Rme:Rule:Manager *manager)
    {
        RmeConfigLoader *obj = GET_NEW;
        RmeConfigLoaderPrivate *priv = obj->_priv;

        priv->manager = manager;
        g_object_ref(manager);
        priv->synerr = 0;

        return obj;
    }

    /**
     * @brief load config file
     *
     * @param[in] self RmeConfigLoader object
     * @param[in] file Config file to load
     * @return
     *  - >= 0 the number of syntax errors found
     *  - -ENOENT the config file can't be found or opened
     *  - -EILSEQ an unrecoverable parse error occured
     *  - -1 an unknown error occured
     */
    public int load(self, const char *file)
    {
        FILE *fd;
        int ret;

        fd = fopen(file, "r");
        if (fd == NULL) {
            log_error("[Config=%s]: %s", file, g_strerror(errno));
            return -ENOENT;
        }

        if (yylex_init_extra(self, &selfp->scaninfo))
            return -1;

        yyset_in(fd, selfp->scaninfo);

        selfp->file = file;

        log_info("[Config=%s]: parsing", file);

        ret = yyparse(self);

        selfp->file = NULL;

        if (ret != 0) {
            log_warning("[Config=%s]: failed to parse (ret:%i)", file, ret);
            return -EILSEQ;
        }
        else {
            log_warning("[Config=%s]: parsing done (synerr:%i)", file,
                    selfp->synerr);
            return selfp->synerr;
        }
    }

    /**
     * @brief get syntax error count
     */
    public int synerr(self)
    {
        return selfp->synerr;
    }

    private uint32_t line = 1;

    /**
     * @brief get current line number
     *
     * @details only used internally by the parser
     */
    protected uint32_t get_line(self)
    {
        return selfp->line;
    }

    /**
     * @brief increment current line number
     *
     * @details only used internally by the parser
     */
    protected void line_inc(self)
    {
        selfp->line++;
    }

    /**
     * @brief get current config file name
     *
     * @details only available while parsing
     */
    protected const char *get_file(self)
    {
        return selfp->file;
    }


    private Rme:Rule:Manager *manager unrefwith g_object_unref;
    private yyscan_t scaninfo;
    private int synerr;
    private const gchar *file = NULL;
}

