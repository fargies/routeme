
requires 2.0.18

%h{
#include <glib.h>
#include "rme-service.h"
#include "rme-rule.h"
#include "logger.h"
#include "WANConnection_proxy.h"
%}

%{

typedef struct {
    RmeRule *rule;
    RmeServiceWAN *service;
} RmeServiceCBData;

static RmeServiceCBData *rme_service_cb_data_new(RmeServiceWAN *service,
        RmeRule *rule)
{
    RmeServiceCBData *ret = g_slice_alloc(sizeof (RmeServiceCBData));
    ret->rule = g_object_ref(rule);
    ret->service = g_object_ref(service);
    return ret;
}

static void rme_service_cb_data_destroy(RmeServiceCBData *cb)
{
    g_object_unref(cb->rule);
    g_object_unref(cb->service);
    g_slice_free1(sizeof (RmeServiceCBData), cb);
}

#define CHECK_INTERVAL (10 * 60 * 1000)

/**
 * @brief error codes from WANPPPConnection v1
 *
 * @see UPnP-gw-WANPPPConnection-v1-Service-20011112.pdf
 */
typedef enum {
    INVALID_ARGS = 402,
    ACTION_FAILED = 501,
    WILDCARD_NOT_PERMITTED_IN_SRC_IP = 715,
    WILDCARD_NOT_PERMITTED_IN_EXT_PORT = 716,
    CONFLICT_IN_MAPPING_ENTRY = 718,
    SAME_PORT_VALUES_REQUIRED = 724,
    ONLY_PERMANENT_LEASES_SUPPORTED = 725,
    REMOTE_HOST_ONLY_SUPPORTS_WILDCARD = 726,
    EXTERNAL_PORT_ONLY_SUPPORTS_WILDCARD = 727
} WANErrors;


void rme_service_wan_num_entries_changed(GUPnPServiceProxy *proxy,
        guint port_mapping_number_of_entries,
        gpointer userdata);

%}

class Rme:Service:WAN from Rme:Service
{
    public Rme:Service:WAN *new(G:UPnP:Service:Proxy *proxy)
    {
        RmeServiceWAN *obj = GET_NEW;
        RmeServiceWANPrivate *priv = obj->_priv;

        priv->proxy = g_object_ref(proxy);

        gupnp_service_proxy_set_subscribed(proxy, TRUE);
        port_mapping_number_of_entries_add_notify(proxy,
                rme_service_wan_num_entries_changed, NULL);


        obj->_priv->timeout_id = g_timeout_add(CHECK_INTERVAL,
                (GSourceFunc) rme_service_wan_check_timer_cb, obj);
        return obj;
    }

    override (Rme:Service) void add_rule(Rme:Service *vself, Rme:Rule *rule)
    {
        RmeServiceWAN *self = RME_SERVICE_WAN(vself);

        g_mutex_lock(selfp->mutex);
        selfp->rules = g_list_prepend(selfp->rules,
                (gpointer) g_object_ref(rule));


        rme_service_wan_map(self, rule);
        g_mutex_unlock(selfp->mutex);
    }

    override (Rme:Service) void remove_rule(self, Rme:Rule *rule)
    {
    }

    override (Rme:Service) void check(Rme:Service *vself)
    {
        RmeServiceWAN *self = RME_SERVICE_WAN(vself);

        g_mutex_lock(selfp->mutex);
        GList *iter;
        for (iter = selfp->rules; iter != NULL; iter = g_list_next(iter))
        {
            const char *proto = (rme_rule_get_protocol(iter->data) ==
                    RME_PROTO_TCP) ? "TCP" : "UDP";
            RmeServiceCBData *cb_data = rme_service_cb_data_new(self,
                    iter->data);

            get_specific_port_mapping_entry_async(selfp->proxy, "",
                    rme_rule_get_external_port(iter->data), proto,
                    rme_service_wan_check_rule_cb, cb_data);
        }
        g_mutex_unlock(selfp->mutex);
    }

    public void num_entries_changed(GUPnPServiceProxy *proxy,
            guint num_of_entries,
            gpointer userdata)
    {
        log_error("Number of entries changed: %i", num_of_entries);
    }

    private const char *get_host_ip(self)
    {
        return gupnp_context_get_host_ip(
                gupnp_service_info_get_context(
                    GUPNP_SERVICE_INFO(selfp->proxy)));
    }

    private gboolean has_rule(self, Rme:Rule *rule)
    {
        gboolean ret;

        ret = (g_list_find(selfp->rules, rule) != NULL);

        return ret;
    }

    private void map(self, Rme:Rule *rule)
    {
        const char *proto = (rme_rule_get_protocol(rule) == RME_PROTO_TCP) ?
            "TCP" : "UDP";
        const char *ip = rme_rule_get_local_ip(rule);

        if (!ip || strlen(ip) == 0)
            ip = rme_service_wan_get_host_ip(self);

        add_port_mapping_async(selfp->proxy,
                "", rme_rule_get_external_port(rule), proto,
                rme_rule_get_local_port(rule), ip,
                TRUE, rme_rule_get_description(rule), 0,
                rme_service_wan_map_cb,
                rme_service_cb_data_new(self, rule));
    }

    private void unmap(self, Rme:Rule *rule)
    {
        const char *proto = (rme_rule_get_protocol(rule) == RME_PROTO_TCP) ?
            "TCP" : "UDP";

        delete_port_mapping_async(selfp->proxy,
                "", rme_rule_get_external_port(rule), proto,
                rme_service_wan_unmap_cb,
                rme_service_cb_data_new(self, rule));
    }

    private void map_cb(G:UPnP:Service:Proxy *proxy,
            G:Error *error,
            gpointer userdata)
    {
        gboolean has_rule;
        RmeServiceCBData *args = (RmeServiceCBData *) userdata;

        g_mutex_lock(args->service->_priv->mutex);
        has_rule = rme_service_wan_has_rule(args->service, args->rule);

        if (error)
        {
            if (has_rule == FALSE)
            {
                log_warning("[WANService][Rule=%s]: removed",
                        rme_rule_get_signature(args->rule));
            }
            else if (error->code == ACTION_FAILED)
            {
                log_info("[WANService][Rule=%s]: action failed",
                        rme_rule_get_signature(args->rule));
                //FIXME: try again later
            }
            else if (error->code == CONFLICT_IN_MAPPING_ENTRY)
            {
                log_info("[WANService][Rule=%s]: mapping conflict",
                        rme_rule_get_signature(args->rule));

                rme_service_wan_unmap(args->service, args->rule);
            }
            else
            {
                log_error("[WANService][Rule=%s]: failed to map port: %s (%i)",
                        rme_rule_get_signature(args->rule), error->message,
                        error->code);
            }
            g_error_free(error);
        }
        else if (!has_rule)
        {
            rme_service_wan_unmap(args->service, args->rule);
        }
        else
        {
            log_info("[WANService][Rule=%s]: port mapped",
                    rme_rule_get_signature(args->rule));
        }
        g_mutex_unlock(args->service->_priv->mutex);
        rme_service_cb_data_destroy(args);
    }

    private void unmap_cb(G:UPnP:Service:Proxy *proxy,
            G:Error *error,
            gpointer userdata)
    {
        gboolean has_rule;
        RmeServiceCBData *args = (RmeServiceCBData *) userdata;

        g_mutex_lock(args->service->_priv->mutex);
        if (error)
        {
            log_warning("[WANService][Rule=%s]: failed to unmap: %s (%i)",
                    rme_rule_get_signature(args->rule), error->message,
                    error->code);
            g_error_free(error);
        }
        else if (rme_service_wan_has_rule(args->service, args->rule) == TRUE)
        {
            rme_service_wan_map(args->service, args->rule);
        }
        else
        {
            log_info("[WANService][Rule=%s]: port unmapped",
                    rme_rule_get_signature(args->rule));
        }
        g_mutex_unlock(args->service->_priv->mutex);
        rme_service_cb_data_destroy(args);
    }

    private void check_rule_cb(G:UPnP:Service:Proxy *proxy,
            guint int_port, const char *int_client,
            const gboolean enabled,
            const gchar *desc,
            const guint lease,
            G:Error *error,
            gpointer userdata)
    {
        RmeServiceCBData *args = (RmeServiceCBData *) userdata;

        g_mutex_lock(args->service->_priv->mutex);
        if (error)
        {
            log_warning("[WANService][Rule=%s]: failed to check rule: %s (%i)",
                    rme_rule_get_signature(args->rule), error->message,
                    error->code);
            rme_service_wan_map(args->service, args->rule);
            g_error_free(error);
        }
        else if (rme_service_wan_has_rule(args->service, args->rule) == TRUE)
        {
            const char *local_ip = rme_rule_get_local_ip(args->rule);
            guint local_port = rme_rule_get_local_port(args->rule);

            if (!local_ip || strlen(local_ip) == 0)
                local_ip = rme_service_wan_get_host_ip(args->service);

            if (enabled == FALSE ||
                    int_port != local_port ||
                    strcmp(int_client, local_ip) != 0)
            {
                log_info("[WANService][Rule=%s]: mapping check failed (%s:%i "
                        "enabled=%s)", rme_rule_get_signature(args->rule),
                        int_client, int_port, (enabled == TRUE) ? "TRUE" :
                        "FALSE");
                rme_service_wan_map(args->service, args->rule);
            }
        }
        g_mutex_unlock(args->service->_priv->mutex);
        rme_service_cb_data_destroy(args);
    }

    private gboolean check_timer_cb(Rme:Service *srv)
    {
        rme_service_check(srv);
        return TRUE;
    }

    private G:UPnP:Service:Proxy *proxy = NULL unrefwith g_object_unref;
    private G:List *rules = NULL
        unref { g_list_free_full(VAR, g_object_unref); };
    private G:Mutex *mutex = { g_mutex_new(); } unrefwith g_mutex_free;
    private guint timeout_id unref { g_source_remove(timeout_id); };
}

